<?php
// $Id: pdf2text.module,v 1.1 2010/06/04 08:00:14 saubhagya Exp $

// Including the file with the code for conversion of pdf into html
include("pdf2text.pdf2text.inc");


/**
 * @file
 * File-handling and conversion of atteched pdf files into
 * text and then displaying them using the body field of the node.
 *
 */
/**
 * Implementation of hook_help().
 */
function pdf2text_help($path, $arg) {

// Checking the browser type
  $browser_type=(string)($_SERVER["HTTP_USER_AGENT"]);
  $found=preg_match("/MSIE/i", "$browser_type");
  if($found) {
     return;
  }


  switch ($path) {
    case 'admin/help#pdf2text':
      $output = '<p>'. t('The pdf2text allows users to upload pdf files and view them as normal text files. The ability to upload files is important for members of a community who want to share work and the conversion of pdf to text allows user to add information originally in the pdf format as text in body field of the node.') .'</p>';
      $output .= '<p>'. t('Users with the upload files permission can add content within the body of the node. Uploads may be enabled for specific content types on the content types settings page. Only files with pdf format and upto 2MB of size can be uploaded.') .'</p>';
      $output .='<p>'.t('This module is not compatible with Internet Explorer.').'</p>';
      return $output;
    case 'admin/settings/pdf2text':
      return '<p>'. t('Users with the <a href="@permissions">upload pdf files permission</a> can upload files. Users with the <a href="@permissions">view uploaded pdf files permission</a> can view uploaded files. You can choose which post types can take attachments on the <a href="@types">content types settings</a> page.', array('@permissions' => url('admin/user/permissions'), '@types' => url('admin/settings/types'))) .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function pdf2text_perm() {
  return array('upload pdf files', 'view uploaded pdf files');
}

/**
 * Implementation of hook_menu().
 */
function pdf2text_menu() {

  // Checking the browser type
  $browser_type=(string)($_SERVER["HTTP_USER_AGENT"]);
  $found=preg_match("/MSIE/i", "$browser_type");
  if($found) {
     drupal_set_message(t('The Pdf-To-Text Module is not compatible with Internet Explorer'),'error');
     return;
  }


  $items['admin/settings/pdf2text'] = array(
    'title' => 'Upload Settings',
    'description' => 'Control how files may be attached to content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pdf2text_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pdf2text.admin.inc',
  );
  return $items;
}

function pdf2text_menu_alter(&$items) {
  $items['system/files']['access arguments'] = array('view uploaded pdf files');
}

/**
 * Implementation of hook_nodeapi().
 */
function pdf2text_nodeapi(&$node, $op, $teaser) {

 // Checking the browser type
  $browser_type=(string)($_SERVER["HTTP_USER_AGENT"]);
  $found=preg_match("/MSIE/i", "$browser_type");

  switch ($op) {

    case 'load':
      $output = '';

      if (variable_get("pdf2text_$node->type", 1) == 1 && !found) {
        $output['files'] = pdf2text_load($node);
        return $output;
      }
      break;

    case 'view':
      break;

    case 'insert':
    case 'update':
      if (user_access('upload pdf files') && !$found) {
        pdf2text_save($node);
      }
      break;

    case 'delete':
      if(!$found)
        pdf2text_delete($node);
      break;

    case 'delete revision':
      if(!$found)
       pdf2text_delete_revision($node);
      break;

  }

}

function pdf2text_load($node) {

 // Checking the browser type
  $browser_type=(string)($_SERVER["HTTP_USER_AGENT"]);
  $found=preg_match("/MSIE/i", "$browser_type");

  $files = array();
  if ($node->vid && !$found) {
    $result = db_query('SELECT * FROM {files} f INNER JOIN {pdf2text} r ON f.fid = r.fid WHERE r.vid = %d ORDER BY r.weight, f.fid', $node->vid);
    while ($file = db_fetch_object($result)) {
      $files[$file->fid] = $file;
    }
  }

  return $files;
}


function _pdf2text_form($node) {
  global $user;

  // Checking the browser type
  $browser_type=(string)($_SERVER["HTTP_USER_AGENT"]);
  $found=preg_match("/MSIE/i", "$browser_type");

  $form = array(
    '#cache' => TRUE,
  );

  // Making the Content specific settings
  $types_to_attach=variable_get('pdf2text_node_types', array('page'));
  $flag=0;
  $ntype=$node->type;

  foreach($types_to_attach as $types => $values ) {
  	if($ntype == $types && $values) {
  		$flag=1;
  	}
  }

  if (user_access('upload pdf files') && $flag && !$found) {
    $limits = _pdf2text_file_limits($user);
    $form['add']['#weight'] = 10;
    $form['add']['pdf2text'] = array(
      '#type' => 'file',
      '#title' => t('Attach a file'),
      '#size' => 40,
      '#description' => t('The maximum upload size is %filesize (with a max. of 15 pages). Only files with the following extensions may be uploaded: %extensions. ', array('%extensions' => $limits['extensions'], '%filesize' => format_size($limits['file_size']))),
    );
     $form['add']['upload'] = array(
      '#type' => 'submit',
      '#value' => t('Upload'),
      '#name' => 'upload',
      '#submit' => array('node_form_submit_build_node'),
    );
  }
  return $form;
}


function pdf2text_form_alter(&$form, $form_state, $form_id) {

  if (isset($form['type']) && isset($form['#node'])) {
    $node = $form['#node'];

   // Checking the browser type
  $browser_type=(string)($_SERVER["HTTP_USER_AGENT"]);
  $found=preg_match("/MSIE/i", "$browser_type");


  // Making the Content specific settings
  $types_to_attach1=variable_get('pdf2text_node_types', array('page'));
  $flag1=0;
  $ntype1=$node->type;

  foreach($types_to_attach1 as $types => $values ) {
  	if($ntype1 == $types && $values) {
  		$flag1=1;
  	}
  }

    if ($form['type']['#value'] .'_node_form' == $form_id && variable_get("pdf2text_$node->type", TRUE) && $flag1 && !$found) {
      // Attachments fieldset
      $form['pdf attachments'] = array(
        '#type' => 'fieldset',
        '#access' => user_access('upload pdf files'),
        '#title' => t('Convert PDF'),
        '#collapsible' => TRUE,
        '#collapsed' => empty($node->files),
        '#description' => t('In case of multiple uploads, the content is appended.'),
        '#prefix' => '<div class="attachments">',
        '#suffix' => '</div>',
        '#weight' => 40,
      );

      $form['pdf attachments']['wrappers'] = array(
        '#prefix' => '<div id="attach-wrapper">',
        '#suffix' => '</div>',
      );

      // Make sure necessary directories for pdf2text.module exist and are
      // writable before displaying the attachment form.
      $path = file_directory_path();
      $temp = file_directory_temp();

      // Note: pass by reference

      if (!file_check_directory($path, FILE_CREATE_DIRECTORY) || !file_check_directory($temp, FILE_CREATE_DIRECTORY)) {
        $form['pdf attachments']['#description'] =  t('File attachments are disabled. The file directories have not been properly configured.');
        if (user_access('administer site configuration')) {
          $form['pdf attachments']['#description'] .= ' '. t('Please visit the <a href="@admin-file-system">file system configuration page</a>.', array('@admin-file-system' => url('admin/settings/file-system')));
        }
        else {
          $form['pdf attachments']['#description'] .= ' '. t('Please contact the site administrator.');
        }
      }
      else {
        $form['pdf attachments']['wrappers'] += _pdf2text_form($node);
        $form['#attributes']['enctype'] = 'multipart/form-data';
      }

    }
    $form['#submit'][] = 'pdf2text_node_form_submit';
  }
}


/**
 * Save new uploads and store them in the session to be associated to the node
 * on upload_save.
 *
 * @param $node
 *   A node object to associate with uploaded files.
 */
function pdf2text_node_form_submit(&$form, &$form_state) {
  global $user;

  // Checking the browser type
  $browser_type=(string)($_SERVER["HTTP_USER_AGENT"]);
  $found=preg_match("/MSIE/i", "$browser_type");

  $limits = _pdf2text_file_limits($user);
  $validators = array(
    'file_validate_extensions' => array($limits['extensions']),
    'file_validate_image_resolution' => array($limits['resolution']),
    'file_validate_size' => array($limits['file_size'], $limits['user_size']),
  );

   $file = file_save_upload('pdf2text', $validators, file_directory_path());
   $err=0;

   $lent=strlen($form_state['values']['body']);

    // max size of contents that can be added into body under default cofiguration of mysql

   if($lent >= 182844) {
      $err=1;
    }

    // error checking
   if($file && $file->filemime!='application/pdf') {
   	 drupal_set_message(t('Invalid File extension'),'error');
     $err=1;
   }
   elseif($file && $file->filesize>(1048576 * 2)) {
   	 drupal_set_message(t('File size is exceeded'),'error');
   	 $err=1;
   }

  // Save new file uploads.
  elseif (user_access('upload pdf files') && $file && !$err && !$found) {
    $file->list = variable_get('pdf2text_list_default', 1);
    $file->description = $file->filename;
    $file->weight = 0;
    $file->new = TRUE;

    //set the contents of the file as the body of the node
    $file_path= file_directory_path()."/".$file->filename;
    $file_content=(string)_pdf2text_pdf_to_text($file_path);
    $content=$body_content=(string)$form_state['values']['body'];

    $len5=strlen($file_content);

    // Checking the string for Unwanted characters

    for($i=0;$i<$len5;$i++) {

      $cont=$file_content[$i];

        $val = ($cont=='<' || $cont=='>' || $cont==' ' || $cont=='?' || $cont==',' || $cont=='.' || $cont=='/' || $cont==';' || $cont==':' || $cont=='\'' || $cont=='\"' || $cont=='[' || $cont=='{' || $cont=='}' || $cont==']' || $cont=='\\' || $cont=='|' || $cont=='-' || $cont=='_' || $cont=='=' || $cont=='+' || $cont==')' || $cont=='(' || $cont=='*' || $cont=='&' || $cont=='^' || $cont=='%' || $cont=='$' || $cont=='#' || $cont=='@' || $cont=='!'|| $cont=='~' || $cont=='`');
        $abc= ($cont=='a' || $cont=='b' || $cont=='c' || $cont=='d' || $cont=='e' || $cont=='f' || $cont=='g' || $cont=='h' || $cont=='i' || $cont=='j' || $cont=='k' || $cont=='l' || $cont=='m' || $cont=='n' || $cont=='o' || $cont=='p' || $cont=='q' || $cont=='r' || $cont=='s' || $cont=='t' || $cont=='u' || $cont=='v' || $cont=='w' || $cont=='x' || $cont=='y' || $cont=='z');
        $AB= ($cont=='A' || $cont=='C' || $cont=='D' || $cont=='B' || $cont=='E' || $cont=='F' || $cont=='G' || $cont=='H' || $cont=='I' || $cont=='J' || $cont=='K' || $cont=='L' || $cont=='M' || $cont=='N' || $cont=='O' || $cont=='P' || $cont=='Q' || $cont=='R' || $cont=='S' || $cont=='T' || $cont=='U' || $cont=='V' || $cont=='W' || $cont=='X' || $cont=='Y' || $cont=='Z');
        $num= ($cont=='1' || $cont=='\0' || $cont=='2' || $cont=='3' || $cont=='4' || $cont=='5' || $cont=='6' || $cont=='7' || $cont=='8' || $cont=='9'|| $cont=='0');

        if(!$val)
         if(!$num)  {
          if(!$abc)
            if(!$AB) {
                   $cont=' ';
         }
        }

        if($AB) {
            $temp=strtolower($cont);
            $check = ($temp=='a' || $temp=='b' || $temp=='c' || $temp=='d' || $temp=='e' || $temp=='f' || $temp=='g' || $temp=='h' || $temp=='i' || $temp=='j' || $temp=='k' || $temp=='l' || $temp=='m' || $temp=='n' || $temp=='o' || $temp=='p' || $temp=='q' || $temp=='r' || $temp=='s' || $temp=='t' || $temp=='u' || $temp=='v' || $temp=='w' || $temp=='x' || $temp=='y' || $temp=='z');
            if(!$check)
               $count='';
        }

        $file_content[$i]=$cont;

    }

     // Adding Scroll Bars

     $scroll='<style type="text/css">.divScroll-3 {height:556px ;width:100%; overflow:scroll; white-space:nowrap;
     }</style><div class="divScroll-3"><object>';


    $len1=strlen($body_content);
    $len2=strlen($scroll);
    $match=0;

    for($i=0;$i<$len1;$i++) {
    	if($body_content[$i]==$scroll[0]) {
    		for($j=0;$j<$len2 && ($i+$j)<$len1;$j++) {
    			if($body_content[$i+$j]!=$scroll[$j]) {
    				$match=0;
    				break;
    			}
    		}
    		if($j==$len2 || ($j+$i)==$len1){
    			$match=1;
    			break;
    		}
    	}
    }

    // Appending the file content to body content
    if(!$match) {
    	$content=$scroll;
        $content.=$body_content;
    }
    else {
    	$strip='</div></object>';
    	$len_strip=strlen($strip);
    	$len_body=strlen($body_content);
    	$content=substr($body_content,0,$len_body-$len_strip);
    }

    $content.=$file_content;
    $content.='</div></object>';


    $len=strlen($content);
    // max size of contents that can be added into body under default cofiguration of mysql

   if($len >= 182844) {
       drupal_set_message(t('The content size is way too large, nothing was appended.'),'error');
    }

    else  {

      $form_state['values']['body']=$content;
      drupal_set_message(t('The file content have been successfully appended to the body.'));

    }

  }

  // Delete the file form the location
  $path= file_directory_path()."/".$file->filename;
  file_delete($path);
}


function pdf2text_save(&$node) {
  if (empty($node->files) || !is_array($node->files)) {
    return;
  }

  foreach ($node->files as $fid => $file) {
    // Convert file to object for compatibility
    $file = (object)$file;

    // Remove file. Process removals first since no further processing
    // will be required.
    if (!empty($file->remove)) {
      db_query('DELETE FROM {pdf2text} WHERE fid = %d AND vid = %d', $fid, $node->vid);

      // If the file isn't used by any other revisions delete it.
      $count = db_result(db_query('SELECT COUNT(fid) FROM {pdf2text} WHERE fid = %d', $fid));
      if ($count < 1) {
        file_delete($file->filepath);
        db_query('DELETE FROM {files} WHERE fid = %d', $fid);
      }

      // Remove it from the session in the case of new uploads,
      // that you want to disassociate before node submission.
      unset($node->files[$fid]);
      // Move on, so the removed file won't be added to new revisions.
      continue;
    }

    // Create a new revision, or associate a new file needed.
    if (!empty($node->old_vid) || $file->new) {
      db_query("INSERT INTO {pdf2text} (fid, nid, vid, list, description, weight) VALUES (%d, %d, %d, %d, '%s', %d)", $file->fid, $node->nid, $node->vid, $file->list, $file->description, $file->weight);
      file_set_status($file, FILE_STATUS_PERMANENT);
    }
    // Update existing revision.
    else {
      db_query("UPDATE {pdf2text} SET list = %d, description = '%s', weight = %d WHERE fid = %d AND vid = %d", $file->list, $file->description, $file->weight, $file->fid, $node->vid);
      file_set_status($file, FILE_STATUS_PERMANENT);
    }
  }
}

function pdf2text_delete($node) {
  $files = array();
  $result = db_query('SELECT DISTINCT f.* FROM {pdf2text} u INNER JOIN {files} f ON u.fid = f.fid WHERE u.nid = %d', $node->nid);
  while ($file = db_fetch_object($result)) {
    $files[$file->fid] = $file;
  }

  foreach ($files as $fid => $file) {
    // Delete all files associated with the node
    db_query('DELETE FROM {files} WHERE fid = %d', $fid);
    file_delete($file->filepath);
  }

  // Delete all file revision information associated with the node
  db_query('DELETE FROM {pdf2text} WHERE nid = %d', $node->nid);
}

function pdf2text_delete_revision($node) {
  if (is_array($node->files)) {
    foreach ($node->files as $file) {
      // Check if the file will be used after this revision is deleted
      $count = db_result(db_query('SELECT COUNT(fid) FROM {pdf2text} WHERE fid = %d', $file->fid));

      // if the file won't be used, delete it
      if ($count < 2) {
        db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);
        file_delete($file->filepath);
      }
    }
  }

  // delete the revision
  db_query('DELETE FROM {pdf2text} WHERE vid = %d', $node->vid);
}



/**
 * Determine the limitations on files that a given user may upload. The user
 * may be in multiple roles so we select the most permissive limitations from
 * all of their roles.
 *
 * @param $user
 *   A Drupal user object.
 * @return
 *   An associative array with the following keys:
 *     'extensions'
 *       A white space separated string containing all the file extensions this
 *       user may upload.
 *     'file_size'
 *       The maximum size of a file upload in bytes.
 *     'user_size'
 *       The total number of bytes for all for a user's files.(not used by the module)
 *     'resolution'
 *       A string specifying the maximum resolution of images.(not used by the module)
 */
function _pdf2text_file_limits($user) {
  return array(
    'extensions' => 'pdf',
    'file_size' => 1048576 * 2,
    'user_size' => 1048576 * 2,
    'resolution' => 0, // zero for no limit
  );
}

/**
 * Implementation of hook_file_download().
 */
function pdf2text_file_download($filepath) {
  $filepath = file_create_path($filepath);
  $result = db_query("SELECT f.*, u.nid FROM {files} f INNER JOIN {pdf2text} u ON f.fid = u.fid WHERE filepath = '%s'", $filepath);
  if ($file = db_fetch_object($result)) {
    if (user_access('view uploaded pdf files') && ($node = node_load($file->nid)) && node_access('view', $node)) {
      return array(
        'Content-Type: ' . $file->filemime,
        'Content-Length: ' . $file->filesize,
      );
    }
    else {
      return -1;
    }
  }
}

/**
 * Determine how much disk space is occupied by a user's uploaded files.
 *
 * @param $uid
 *   The integer user id of a user.
 * @return
 *   The amount of disk space used by the user in bytes.
 */
function pdf2text_space_used($uid) {
  return file_space_used($uid);
}

/**
 * Determine how much disk space is occupied by uploaded files.
 *
 * @return
 *   The amount of disk space used by uploaded files in bytes.
 */
function pdf2text_total_space_used() {
  return db_result(db_query('SELECT SUM(f.filesize) FROM {files} f INNER JOIN {pdf2text} u ON f.fid = u.fid'));
}
